// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(cuid())
  name       String
  email      String     @unique
  password   String
  img        String
  role       Role       @default(USER)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  cart       Cart?
  categories Category[]
  comments   Comment[]
  foods      Food[]
  likes      Like[]
  orders     Order[]
  reserve    Reserve[]
}

model Food {
  id          String         @id @default(cuid())
  title       String         @unique
  ingredients Json
  img         String
  rating      Float
  userId      String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  price       Int
  cartItems   CartItem[]
  comments    Comment[]
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  categories  FoodCategory[]
  likes       Like[]
}

model Category {
  id           String         @id @default(cuid())
  title        String
  englishTitle String
  userId       String
  img          String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  foods        FoodCategory[]
}

model FoodCategory {
  id         String   @id @default(cuid())
  foodId     String
  categoryId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  food       Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)

  @@unique([foodId, categoryId])
  @@index([foodId, categoryId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  foodId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  food      Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, foodId])
  @@index([userId, foodId])
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  foodId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  verified  Boolean  @default(false)
  food      Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, foodId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
}

model CartItem {
  id        String   @id @default(cuid())
  foodId    String
  cartId    String?
  orderId   String?
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart?    @relation(fields: [cartId], references: [id])
  food      Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)
  order     Order?   @relation(fields: [orderId], references: [id])

  @@unique([foodId, cartId])
  @@index([foodId, cartId])
}

model Order {
  id        String      @id @default(cuid())
  userId    String
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  cartItems CartItem[]
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Reserve {
  id        String   @id @default(cuid())
  name      String
  phone     String
  quantity  Int
  date      String
  time      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}
